{"/home/travis/build/npmtest/node-npmtest-find-rss/test.js":"/* istanbul instrument in package npmtest_find_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-find-rss/lib.npmtest_find_rss.js":"/* istanbul instrument in package npmtest_find_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_find_rss = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_find_rss = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-find-rss/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-find-rss && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_find_rss */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_find_rss\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_find_rss.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_find_rss.rollup.js'] =\n            local.assetsDict['/assets.npmtest_find_rss.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_find_rss.__dirname + '/lib.npmtest_find_rss.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-find-rss/node_modules/find-rss/lib/find-rss.js":"(function() {\n  var _finder, async, finder, iconv, jschardet, parser, request, requestAndEncodeWithDetectCharset, url;\n\n  jschardet = require(\"jschardet\");\n\n  iconv = require('iconv-lite');\n\n  request = require('request');\n\n  async = require('async');\n\n  url = require('url');\n\n  parser = require(\"./parser\");\n\n  module.exports = finder = function(req, callback) {\n    if (typeof callback !== 'function') {\n      return new Promise(function(resolve, reject) {\n        return _finder(req, function(err, result) {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(result);\n        });\n      });\n    }\n    return _finder(req, callback);\n  };\n\n  _finder = function(req, callback) {\n    var body, candidates, urlObject;\n    if (typeof req === \"string\") {\n      req = {\n        url: req\n      };\n    }\n    req.encoding = null;\n    if (finder.favicon == null) {\n      finder.favicon = true;\n    }\n    if (finder.getDetail == null) {\n      finder.getDetail = false;\n    }\n    if (finder.maxResponseSize == null) {\n      finder.maxResponseSize = null;\n    }\n    if (!/^https?/.test(req.url)) {\n      return callback(new Error(\"Not HTTP URL is provided.\"), null);\n    }\n    urlObject = url.parse(req.url);\n    body = \"\";\n    candidates = [];\n    return async.series([\n      function(cb) {\n        return requestAndEncodeWithDetectCharset(req, function(err, html) {\n          if (err) {\n            return cb(err);\n          }\n          body = html;\n          return cb();\n        });\n      }, function(cb) {\n        return parser(body, function(err, cands) {\n          if (err) {\n            return cb(err);\n          }\n          candidates = cands;\n          return cb();\n        });\n      }, function(cb) {\n        var cand, i, len;\n        for (i = 0, len = candidates.length; i < len; i++) {\n          cand = candidates[i];\n          if (cand.link != null) {\n            cand.url = req.url;\n            cand.sitename = cand.title;\n          } else {\n            if (/^https?/.test(cand.href)) {\n              cand.url = cand.href;\n            } else if (cand.href != null) {\n              cand.url = url.resolve(urlObject.protocol + \"//\" + urlObject.host, cand.href);\n            }\n          }\n        }\n        return cb();\n      }, function(cb) {\n        var newCandidates;\n        if (!finder.getDetail) {\n          return cb();\n        }\n        if (candidates.length > 0 && (candidates[0].link != null)) {\n          return cb();\n        }\n        newCandidates = [];\n        return async.forEach(candidates, function(cand, _cb) {\n          req.url = cand.url;\n          return requestAndEncodeWithDetectCharset(req, function(err, body) {\n            if (err) {\n              return _cb();\n            }\n            return parser(body, function(error, cands) {\n              if (error) {\n                return _cb();\n              }\n              if (cands.length === 0) {\n                return _cb();\n              }\n              cands[0].favicon = cand.favicon;\n              cands[0].sitename = cand.sitename;\n              cands[0].url = cand.url;\n              newCandidates.push(cands[0]);\n              return _cb();\n            });\n          });\n        }, function() {\n          candidates = newCandidates;\n          return cb();\n        });\n      }, function(cb) {\n        if (!finder.favicon) {\n          return cb();\n        }\n        return async.each(candidates, function(cand, _cb) {\n          var guess, ref;\n          if (((ref = cand.favicon) != null ? ref.length : void 0) > 0) {\n            if (/^https?/.test(cand.favicon)) {\n              return _cb();\n            } else {\n              if (cand.favicon.charAt(0) === '/') {\n                cand.favicon = urlObject.protocol + \"//\" + urlObject.host + cand.favicon;\n                return _cb();\n              } else {\n                cand.favicon = urlObject.protocol + \"//\" + urlObject.host + \"/\" + cand.favicon;\n                return _cb();\n              }\n            }\n          } else {\n            guess = urlObject.protocol + \"//\" + urlObject.host + \"/favicon.ico\";\n            return request(guess, function(err, res, body) {\n              if (err || (res != null ? res.statusCode : void 0) !== 200) {\n                return _cb();\n              }\n              cand.favicon = guess;\n              return _cb();\n            });\n          }\n        }, function() {\n          return cb();\n        });\n      }\n    ], function(err) {\n      if (err) {\n        return callback(err, null);\n      } else {\n        return callback(null, candidates);\n      }\n    });\n  };\n\n  finder.setOptions = function(opts) {\n    if (opts.getDetail != null) {\n      finder.getDetail = opts.getDetail;\n    }\n    if (opts.favicon != null) {\n      finder.favicon = opts.favicon;\n    }\n    if (opts.maxResponseSize != null) {\n      return finder.maxResponseSize = opts.maxResponseSize;\n    }\n  };\n\n  requestAndEncodeWithDetectCharset = function(req, callback) {\n    var buffer, maxResponseSize;\n    buffer = '';\n    maxResponseSize = finder.maxResponseSize;\n    return req = request.get(req, function(err, res, body) {\n      var charset, error;\n      if (err) {\n        return callback(err, null);\n      }\n      charset = jschardet.detect(body).encoding;\n      if (!charset || charset === \"\" || charset === null) {\n        return callback(new Error('NotFoundEncodingError'), null);\n      }\n      if (charset !== ('utf-8' || 'UTF-8')) {\n        try {\n          body = iconv.decode(body, charset);\n        } catch (_error) {\n          error = _error;\n          return callback(error, null);\n        }\n      }\n      return callback(null, body);\n    }).on('data', function(chunk) {\n      if (maxResponseSize !== null) {\n        buffer += chunk;\n        if (buffer.length > maxResponseSize) {\n          req.abort();\n          return callback(new Error('HTTP Response size is limit exceeded.'), null);\n        }\n      }\n    });\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-find-rss/node_modules/find-rss/lib/parser.js":"\n/*\n *\n * parser.coffee\n * htmlBodyからRSSの候補を取得する\n * ついでにfaviconも取得する\n *\n */\n\n(function() {\n  var FeedParser, exports, htmlparser;\n\n  FeedParser = require('feedparser');\n\n  htmlparser = require('htmlparser2');\n\n  module.exports = exports = function(htmlBody, callback) {\n    var argumentIsCandidate, cand, candidates, favicon, feedparser, i, len, parser, sitename, sitenameFlag;\n    candidates = [];\n    sitename = \"\";\n    favicon = \"\";\n    argumentIsCandidate = false;\n    sitenameFlag = false;\n    parser = new htmlparser.Parser({\n      onopentag: function(name, attr) {\n        if (/(feed)|(atom)|(rdf)|(rss)/.test(name)) {\n          argumentIsCandidate = true;\n        }\n        if (name === \"link\" && (['application/rss+xml', 'application/atom+xml', 'application/rdf+xml', 'application/rss', 'application/atom', 'application/rdf', 'text/rss+xml', 'text/atom+xml', 'text/rdf+xml', 'text/rss', 'text/atom', 'text/rdf'].indexOf(attr.type) >= 0)) {\n          candidates.push(attr);\n        }\n        if (name === 'link' && (attr.rel === 'icon' || attr.rel === 'shortcut icon' || attr.type === 'image/x-icon')) {\n          favicon = attr.href;\n        }\n        if (name === \"title\") {\n          return sitenameFlag = true;\n        }\n      },\n      ontext: function(text) {\n        if (sitenameFlag) {\n          return sitename = text;\n        }\n      },\n      onclosetag: function(name) {\n        if (name === \"title\") {\n          return sitenameFlag = false;\n        }\n      }\n    }, {\n      recognizeCDATA: true\n    });\n    parser.write(htmlBody);\n    parser.end();\n    if (argumentIsCandidate) {\n      feedparser = new FeedParser();\n      candidates = [];\n      feedparser.on('error', function(err) {\n        return this.emit('end', err);\n      });\n      feedparser.on('readable', function() {\n        var data;\n        if (candidates.length === 0) {\n          data = this.meta;\n          return candidates.push(data);\n        }\n      });\n      feedparser.write(htmlBody);\n      return feedparser.end(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        return callback(null, candidates);\n      });\n    } else {\n      for (i = 0, len = candidates.length; i < len; i++) {\n        cand = candidates[i];\n        cand.sitename = sitename;\n        cand.favicon = favicon;\n      }\n      return callback(null, candidates);\n    }\n  };\n\n}).call(this);\n"}